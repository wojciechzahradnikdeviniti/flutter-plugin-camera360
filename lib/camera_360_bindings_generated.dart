// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/camera_360.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class Camera360Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Camera360Bindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Camera360Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Shared declaration
  bool stitch(
    ffi.Pointer<ffi.Char> inputImagePath,
    ffi.Pointer<ffi.Char> outputImagePath,
    bool cropped,
    double confidenceThreshold,
    double panoConfidenceThresh,
    int waveCorrection,
    int exposureCompensator,
    double registrationResol,
    int featureMatcherType,
    int featureDetectionMethod,
    int featureMatcherImageRange,
  ) {
    return _stitch(
      inputImagePath,
      outputImagePath,
      cropped,
      confidenceThreshold,
      panoConfidenceThresh,
      waveCorrection,
      exposureCompensator,
      registrationResol,
      featureMatcherType,
      featureDetectionMethod,
      featureMatcherImageRange,
    );
  }

  late final _stitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('stitch');
  late final _stitch = _stitchPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool, double,
          double, int, int, double, int, int, int)>();
}
